export const FRAXLEND_TVL_CODE_MAINNET = "0x608060405234801561000f575f5ffd5b5060043610610029575f3560e01c806397b3fcaa1461002d575b5f5ffd5b610035610047565b60405190815260200160405180910390f35b6040805161014081018252730601b72bef2b3f09e9f48b7d60a8d7d2d3800c6e8152738087346b8865e5b0bf9f8a49742c2d83f6a50a6c602082015273b5ae5b75c0df5632c572a657109375646ce66f90918101919091527376ff120ff669591b7cb5452995c0269437bea414606082015273a4ddd4770588ef97a3a03e4b7e3885d824159baa6080820152737093f6141293f7c4f67e5efd922ac934402e452d60a0820152738e5f09de0cd7841239410f929a905e214443d9e060c0820152738c9db7a9329f221ed1ffe56bf4bd073aa320eed960e082015273ab3cb84c310186b2fa4b4503624a5d90b5dcb22d6101008201527328cdf6ce79702aaefbf217cf98cbd11f5639b9f16101208201525f9081805b600a811015610406575f8382600a81106101785761017861040d565b602002015190505f8173ffffffffffffffffffffffffffffffffffffffff1663fbbbf94c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156101c9573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101ed919061043a565b5050505090505f8173ffffffffffffffffffffffffffffffffffffffff1663bd9a548b6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561023d573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061026191906104cf565b509150505f8373ffffffffffffffffffffffffffffffffffffffff1663f9557ccb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102af573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102d39190610507565b90505f8473ffffffffffffffffffffffffffffffffffffffff16634ac8eb5f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561031f573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103439190610507565b90505f8573ffffffffffffffffffffffffffffffffffffffff16638285ef406040518163ffffffff1660e01b8152600401602060405180830381865afa15801561038f573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103b39190610507565b9050836103c883670de0b6b3a764000061054b565b6103d29190610568565b9150806103df83856105a0565b6103e991906105a0565b6103f390896105a0565b975050505050505080600101905061015c565b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f5f5f5f5f60a0868803121561044e575f5ffd5b855173ffffffffffffffffffffffffffffffffffffffff81168114610471575f5ffd5b602087015190955063ffffffff8116811461048a575f5ffd5b604087015190945076ffffffffffffffffffffffffffffffffffffffffffffff811681146104b6575f5ffd5b6060870151608090970151959894975095949392505050565b5f5f5f606084860312156104e1575f5ffd5b835180151581146104f0575f5ffd5b602085015160409095015190969495509392505050565b5f60208284031215610517575f5ffd5b5051919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b80820281158282048414176105625761056261051e565b92915050565b5f8261059b577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b500490565b808201808211156105625761056261051e56fea26469706673582212209e8f1ca141efd8c88f797572ac9c8afdc9ee389e5f0f717c4bddad575d10932b64736f6c634300081c0033";
export const FRAXLEND_TVL_CODE_ARBITRUM = "0x608060405234801561000f575f5ffd5b5060043610610029575f3560e01c806397b3fcaa1461002d575b5f5ffd5b610035610047565b60405190815260200160405180910390f35b60408051606081018252736076ebdfe17555ed3e6869cf9c373bbd9ad55d388152739168ac3a83a31bd85c93f4429a84c05db2caef08602082015273c37aa0cf7e45fe0e811d99062020080147970a1a918101919091525f9081805b600381101561034d575f8382600381106100bf576100bf610354565b602002015190505f8173ffffffffffffffffffffffffffffffffffffffff1663fbbbf94c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610110573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101349190610381565b5050505090505f8173ffffffffffffffffffffffffffffffffffffffff1663bd9a548b6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610184573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101a89190610416565b509150505f8373ffffffffffffffffffffffffffffffffffffffff1663f9557ccb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101f6573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061021a919061044e565b90505f8473ffffffffffffffffffffffffffffffffffffffff16634ac8eb5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610266573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061028a919061044e565b90505f8573ffffffffffffffffffffffffffffffffffffffff16638285ef406040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102d6573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102fa919061044e565b90508361030f83670de0b6b3a7640000610492565b61031991906104af565b91508061032683856104e7565b61033091906104e7565b61033a90896104e7565b97505050505050508060010190506100a3565b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f5f5f5f5f60a08688031215610395575f5ffd5b855173ffffffffffffffffffffffffffffffffffffffff811681146103b8575f5ffd5b602087015190955063ffffffff811681146103d1575f5ffd5b604087015190945076ffffffffffffffffffffffffffffffffffffffffffffff811681146103fd575f5ffd5b6060870151608090970151959894975095949392505050565b5f5f5f60608486031215610428575f5ffd5b83518015158114610437575f5ffd5b602085015160409095015190969495509392505050565b5f6020828403121561045e575f5ffd5b5051919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b80820281158282048414176104a9576104a9610465565b92915050565b5f826104e2577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b500490565b808201808211156104a9576104a961046556fea264697066735822122069c18d7f7be41095a38fb4899261c2c311984609842631239aad9ceb415f334a64736f6c634300081c0033";
export const FRAXLEND_TVL_CODE_FRAXTAL = "0x608060405234801561000f575f5ffd5b5060043610610029575f3560e01c806397b3fcaa1461002d575b5f5ffd5b610035610047565b60405190815260200160405180910390f35b60408051610140810182527325cb9bf429d5ea0530c5db6c96c131499dc255b7815273b2d53df70181fbe783f84b74f58e38cc1ca8528d6020820152737a26b401475a332f62632453a31519c6838b59cc918101919091527319031d9104d6242da19cc2ae0d29e60f2e37e4266060820152731b48c9595385f1780d7be1ab57f8eacfea3a5ce56080820152733e92765ee2b009b104a8a7baf3759b159c19aba160a082015273b71e4829e81f72f7f36a0d858e58109f5948a71360c0820152738eda613ec96992d3c42bcd9ac2ae58a92929ceb260e0820152734f968317721b9c300afbff3fd37365637318271d61010082015273032578d99b1070682a5e171012be1756a50a17d46101208201525f9081805b600a811015610406575f8382600a81106101785761017861040d565b602002015190505f8173ffffffffffffffffffffffffffffffffffffffff1663fbbbf94c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156101c9573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101ed919061043a565b5050505090505f8173ffffffffffffffffffffffffffffffffffffffff1663bd9a548b6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561023d573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061026191906104cf565b509150505f8373ffffffffffffffffffffffffffffffffffffffff1663f9557ccb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102af573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102d39190610507565b90505f8473ffffffffffffffffffffffffffffffffffffffff16634ac8eb5f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561031f573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103439190610507565b90505f8573ffffffffffffffffffffffffffffffffffffffff16638285ef406040518163ffffffff1660e01b8152600401602060405180830381865afa15801561038f573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103b39190610507565b9050836103c883670de0b6b3a764000061054b565b6103d29190610568565b9150806103df83856105a0565b6103e991906105a0565b6103f390896105a0565b975050505050505080600101905061015c565b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f5f5f5f5f60a0868803121561044e575f5ffd5b855173ffffffffffffffffffffffffffffffffffffffff81168114610471575f5ffd5b602087015190955063ffffffff8116811461048a575f5ffd5b604087015190945076ffffffffffffffffffffffffffffffffffffffffffffff811681146104b6575f5ffd5b6060870151608090970151959894975095949392505050565b5f5f5f606084860312156104e1575f5ffd5b835180151581146104f0575f5ffd5b602085015160409095015190969495509392505050565b5f60208284031215610517575f5ffd5b5051919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b80820281158282048414176105625761056261051e565b92915050565b5f8261059b577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b500490565b808201808211156105625761056261051e56fea2646970667358221220166eee94b3c5625d439317de16d43390aeb4032728e84e1c7c345ac53da6110a64736f6c634300081c0033";


import { useMemo } from "react";
import { useQuery } from "@tanstack/react-query";
import { usePublicClient } from "wagmi";
import type { Address } from "viem";

type Args = {
  chainId: number;
  address: Address;
  /** Prefer a stable string here: full event signature or topic0 hash */
  eventKey?: string;                 // e.g. "Transfer(address,address,uint256)"
  topic0?: `0x${string}`;            // if no signature string
  step?: bigint;                     // batching window
  indexedTopics?: (string | null | undefined)[];
};

function toKey(x: unknown): string {
  // ensure queryKey is JSON-serializable & stable
  if (typeof x === "bigint") return `b:${x.toString(10)}`;
  if (typeof x === "string" || typeof x === "number" || typeof x === "boolean" || x == null) return String(x);
  if (Array.isArray(x)) return `[${x.map(toKey).join(",")}]`;
  return JSON.stringify(x); // fallback for plain objects/arrays
}

export function useContractLogsLast43200({
  chainId,
  address,
  eventKey,              // <- use this instead of passing the parsed ABI item
  topic0,
  step = BigInt(10_000),
  indexedTopics,
}: Args) {
  const publicClient = usePublicClient({ chainId });

  const queryKey = useMemo(
  () => [
    "logs:last43200",
    String(chainId),
    (address ?? "").toLowerCase(),
    String(eventKey ?? topic0 ?? "unknown"),
    String((step ?? BigInt(10_000)).toString()),
    JSON.stringify(indexedTopics ?? []),
  ],
  [chainId, address, eventKey, topic0, step, indexedTopics]
);


  return useQuery({
    queryKey,
    enabled: Boolean(publicClient) && Boolean(eventKey || topic0),
    queryFn: async () => {
      if (!publicClient) return [];

      const latest = await publicClient.getBlockNumber();   // bigint
      const window = BigInt(86_400);
      const start = latest > window ? (latest - window) : BigInt(0);
      const batch = step ?? BigInt(10_000);

      const out: any[] = [];
      for (let f = start; f <= latest; f += batch) {
        const t = (f + batch - BigInt(1)) > latest ? latest : (f + batch - BigInt(1));
        const logs = await publicClient.getLogs({
          address,
          ...(topic0
            ? { topics: [topic0 as `0x${string}`, ...(indexedTopics ?? [])] }
            : { // if you passed an event signature string, let’s build topics[0]
                // Fallback: just search on topic0 computed elsewhere if you have it.
              }),
          fromBlock: f,
          toBlock: t,
        });
        out.push(...logs);
      }
      return out;
    },
  });
}
